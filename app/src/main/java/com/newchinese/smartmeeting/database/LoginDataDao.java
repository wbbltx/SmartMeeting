package com.newchinese.smartmeeting.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.newchinese.smartmeeting.entity.bean.LoginData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_DATA".
*/
public class LoginDataDao extends AbstractDao<LoginData, Long> {

    public static final String TABLENAME = "LOGIN_DATA";

    /**
     * Properties of entity LoginData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Token = new Property(2, String.class, "token", false, "TOKEN");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Im_token = new Property(4, String.class, "im_token", false, "IM_TOKEN");
        public final static Property Tel = new Property(5, String.class, "tel", false, "TEL");
        public final static Property Icon = new Property(6, String.class, "icon", false, "ICON");
        public final static Property Comment = new Property(7, String.class, "comment", false, "COMMENT");
    }


    public LoginDataDao(DaoConfig config) {
        super(config);
    }
    
    public LoginDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CODE\" TEXT," + // 1: code
                "\"TOKEN\" TEXT," + // 2: token
                "\"NICKNAME\" TEXT," + // 3: nickname
                "\"IM_TOKEN\" TEXT," + // 4: im_token
                "\"TEL\" TEXT," + // 5: tel
                "\"ICON\" TEXT," + // 6: icon
                "\"COMMENT\" TEXT);"); // 7: comment
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(3, token);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String im_token = entity.getIm_token();
        if (im_token != null) {
            stmt.bindString(5, im_token);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(6, tel);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(7, icon);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(8, comment);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(3, token);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String im_token = entity.getIm_token();
        if (im_token != null) {
            stmt.bindString(5, im_token);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(6, tel);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(7, icon);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(8, comment);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LoginData readEntity(Cursor cursor, int offset) {
        LoginData entity = new LoginData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // token
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // im_token
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // icon
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // comment
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setToken(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIm_token(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTel(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIcon(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setComment(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
