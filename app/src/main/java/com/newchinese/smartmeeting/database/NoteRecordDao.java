package com.newchinese.smartmeeting.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.newchinese.smartmeeting.model.bean.NoteRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE_RECORD".
*/
public class NoteRecordDao extends AbstractDao<NoteRecord, Long> {

    public static final String TABLENAME = "NOTE_RECORD";

    /**
     * Properties of entity NoteRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Location = new Property(3, String.class, "location", false, "LOCATION");
        public final static Property Member = new Property(4, String.class, "member", false, "MEMBER");
        public final static Property Manager = new Property(5, String.class, "manager", false, "MANAGER");
        public final static Property ClassifyName = new Property(6, String.class, "classifyName", false, "CLASSIFY_NAME");
    }

    private DaoSession daoSession;


    public NoteRecordDao(DaoConfig config) {
        super(config);
    }
    
    public NoteRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DATE\" TEXT," + // 2: date
                "\"LOCATION\" TEXT," + // 3: location
                "\"MEMBER\" TEXT," + // 4: member
                "\"MANAGER\" TEXT," + // 5: manager
                "\"CLASSIFY_NAME\" TEXT);"); // 6: classifyName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NoteRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(4, location);
        }
 
        String member = entity.getMember();
        if (member != null) {
            stmt.bindString(5, member);
        }
 
        String manager = entity.getManager();
        if (manager != null) {
            stmt.bindString(6, manager);
        }
 
        String classifyName = entity.getClassifyName();
        if (classifyName != null) {
            stmt.bindString(7, classifyName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NoteRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(4, location);
        }
 
        String member = entity.getMember();
        if (member != null) {
            stmt.bindString(5, member);
        }
 
        String manager = entity.getManager();
        if (manager != null) {
            stmt.bindString(6, manager);
        }
 
        String classifyName = entity.getClassifyName();
        if (classifyName != null) {
            stmt.bindString(7, classifyName);
        }
    }

    @Override
    protected final void attachEntity(NoteRecord entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NoteRecord readEntity(Cursor cursor, int offset) {
        NoteRecord entity = new NoteRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // location
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // member
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // manager
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // classifyName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NoteRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMember(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setManager(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClassifyName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NoteRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NoteRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NoteRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
