package com.newchinese.smartmeeting.database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.newchinese.smartmeeting.util.StringConverterUtil;
import java.util.List;

import com.newchinese.smartmeeting.model.bean.NotePage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE_PAGE".
*/
public class NotePageDao extends AbstractDao<NotePage, Long> {

    public static final String TABLENAME = "NOTE_PAGE";

    /**
     * Properties of entity NotePage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PageIndex = new Property(1, int.class, "pageIndex", false, "PAGE_INDEX");
        public final static Property BookId = new Property(2, long.class, "bookId", false, "BOOK_ID");
        public final static Property Date = new Property(3, long.class, "date", false, "DATE");
        public final static Property InsertPicPath = new Property(4, String.class, "insertPicPath", false, "INSERT_PIC_PATH");
        public final static Property X = new Property(5, float.class, "X", false, "X");
        public final static Property Y = new Property(6, float.class, "Y", false, "Y");
        public final static Property Height = new Property(7, float.class, "height", false, "HEIGHT");
        public final static Property Width = new Property(8, float.class, "width", false, "WIDTH");
        public final static Property ThumbnailPath = new Property(9, String.class, "thumbnailPath", false, "THUMBNAIL_PATH");
        public final static Property ScreenPathList = new Property(10, String.class, "screenPathList", false, "SCREEN_PATH_LIST");
    }

    private DaoSession daoSession;

    private final StringConverterUtil screenPathListConverter = new StringConverterUtil();
    private Query<NotePage> noteRecord_PageListQuery;

    public NotePageDao(DaoConfig config) {
        super(config);
    }
    
    public NotePageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE_PAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PAGE_INDEX\" INTEGER NOT NULL ," + // 1: pageIndex
                "\"BOOK_ID\" INTEGER NOT NULL ," + // 2: bookId
                "\"DATE\" INTEGER NOT NULL ," + // 3: date
                "\"INSERT_PIC_PATH\" TEXT," + // 4: insertPicPath
                "\"X\" REAL NOT NULL ," + // 5: X
                "\"Y\" REAL NOT NULL ," + // 6: Y
                "\"HEIGHT\" REAL NOT NULL ," + // 7: height
                "\"WIDTH\" REAL NOT NULL ," + // 8: width
                "\"THUMBNAIL_PATH\" TEXT," + // 9: thumbnailPath
                "\"SCREEN_PATH_LIST\" TEXT);"); // 10: screenPathList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE_PAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NotePage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPageIndex());
        stmt.bindLong(3, entity.getBookId());
        stmt.bindLong(4, entity.getDate());
 
        String insertPicPath = entity.getInsertPicPath();
        if (insertPicPath != null) {
            stmt.bindString(5, insertPicPath);
        }
        stmt.bindDouble(6, entity.getX());
        stmt.bindDouble(7, entity.getY());
        stmt.bindDouble(8, entity.getHeight());
        stmt.bindDouble(9, entity.getWidth());
 
        String thumbnailPath = entity.getThumbnailPath();
        if (thumbnailPath != null) {
            stmt.bindString(10, thumbnailPath);
        }
 
        List screenPathList = entity.getScreenPathList();
        if (screenPathList != null) {
            stmt.bindString(11, screenPathListConverter.convertToDatabaseValue(screenPathList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NotePage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPageIndex());
        stmt.bindLong(3, entity.getBookId());
        stmt.bindLong(4, entity.getDate());
 
        String insertPicPath = entity.getInsertPicPath();
        if (insertPicPath != null) {
            stmt.bindString(5, insertPicPath);
        }
        stmt.bindDouble(6, entity.getX());
        stmt.bindDouble(7, entity.getY());
        stmt.bindDouble(8, entity.getHeight());
        stmt.bindDouble(9, entity.getWidth());
 
        String thumbnailPath = entity.getThumbnailPath();
        if (thumbnailPath != null) {
            stmt.bindString(10, thumbnailPath);
        }
 
        List screenPathList = entity.getScreenPathList();
        if (screenPathList != null) {
            stmt.bindString(11, screenPathListConverter.convertToDatabaseValue(screenPathList));
        }
    }

    @Override
    protected final void attachEntity(NotePage entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NotePage readEntity(Cursor cursor, int offset) {
        NotePage entity = new NotePage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // pageIndex
            cursor.getLong(offset + 2), // bookId
            cursor.getLong(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // insertPicPath
            cursor.getFloat(offset + 5), // X
            cursor.getFloat(offset + 6), // Y
            cursor.getFloat(offset + 7), // height
            cursor.getFloat(offset + 8), // width
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // thumbnailPath
            cursor.isNull(offset + 10) ? null : screenPathListConverter.convertToEntityProperty(cursor.getString(offset + 10)) // screenPathList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NotePage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPageIndex(cursor.getInt(offset + 1));
        entity.setBookId(cursor.getLong(offset + 2));
        entity.setDate(cursor.getLong(offset + 3));
        entity.setInsertPicPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setX(cursor.getFloat(offset + 5));
        entity.setY(cursor.getFloat(offset + 6));
        entity.setHeight(cursor.getFloat(offset + 7));
        entity.setWidth(cursor.getFloat(offset + 8));
        entity.setThumbnailPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setScreenPathList(cursor.isNull(offset + 10) ? null : screenPathListConverter.convertToEntityProperty(cursor.getString(offset + 10)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NotePage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NotePage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NotePage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "pageList" to-many relationship of NoteRecord. */
    public List<NotePage> _queryNoteRecord_PageList(long bookId) {
        synchronized (this) {
            if (noteRecord_PageListQuery == null) {
                QueryBuilder<NotePage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BookId.eq(null));
                noteRecord_PageListQuery = queryBuilder.build();
            }
        }
        Query<NotePage> query = noteRecord_PageListQuery.forCurrentThread();
        query.setParameter(0, bookId);
        return query.list();
    }

}
