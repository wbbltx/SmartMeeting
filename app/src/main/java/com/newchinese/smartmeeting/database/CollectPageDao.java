package com.newchinese.smartmeeting.database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.newchinese.smartmeeting.util.StringConverterUtil;
import java.util.List;

import com.newchinese.smartmeeting.model.bean.CollectPage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLLECT_PAGE".
*/
public class CollectPageDao extends AbstractDao<CollectPage, Long> {

    public static final String TABLENAME = "COLLECT_PAGE";

    /**
     * Properties of entity CollectPage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PageIndex = new Property(1, int.class, "pageIndex", false, "PAGE_INDEX");
        public final static Property BookId = new Property(2, long.class, "bookId", false, "BOOK_ID");
        public final static Property Date = new Property(3, long.class, "date", false, "DATE");
        public final static Property PicPath = new Property(4, String.class, "picPath", false, "PIC_PATH");
        public final static Property ScreenPathList = new Property(5, String.class, "screenPathList", false, "SCREEN_PATH_LIST");
    }

    private final StringConverterUtil screenPathListConverter = new StringConverterUtil();
    private Query<CollectPage> collectRecord_PageListQuery;

    public CollectPageDao(DaoConfig config) {
        super(config);
    }
    
    public CollectPageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECT_PAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PAGE_INDEX\" INTEGER NOT NULL ," + // 1: pageIndex
                "\"BOOK_ID\" INTEGER NOT NULL ," + // 2: bookId
                "\"DATE\" INTEGER NOT NULL ," + // 3: date
                "\"PIC_PATH\" TEXT," + // 4: picPath
                "\"SCREEN_PATH_LIST\" TEXT);"); // 5: screenPathList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECT_PAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CollectPage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPageIndex());
        stmt.bindLong(3, entity.getBookId());
        stmt.bindLong(4, entity.getDate());
 
        String picPath = entity.getPicPath();
        if (picPath != null) {
            stmt.bindString(5, picPath);
        }
 
        List screenPathList = entity.getScreenPathList();
        if (screenPathList != null) {
            stmt.bindString(6, screenPathListConverter.convertToDatabaseValue(screenPathList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CollectPage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPageIndex());
        stmt.bindLong(3, entity.getBookId());
        stmt.bindLong(4, entity.getDate());
 
        String picPath = entity.getPicPath();
        if (picPath != null) {
            stmt.bindString(5, picPath);
        }
 
        List screenPathList = entity.getScreenPathList();
        if (screenPathList != null) {
            stmt.bindString(6, screenPathListConverter.convertToDatabaseValue(screenPathList));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CollectPage readEntity(Cursor cursor, int offset) {
        CollectPage entity = new CollectPage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // pageIndex
            cursor.getLong(offset + 2), // bookId
            cursor.getLong(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // picPath
            cursor.isNull(offset + 5) ? null : screenPathListConverter.convertToEntityProperty(cursor.getString(offset + 5)) // screenPathList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CollectPage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPageIndex(cursor.getInt(offset + 1));
        entity.setBookId(cursor.getLong(offset + 2));
        entity.setDate(cursor.getLong(offset + 3));
        entity.setPicPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setScreenPathList(cursor.isNull(offset + 5) ? null : screenPathListConverter.convertToEntityProperty(cursor.getString(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CollectPage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CollectPage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CollectPage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "pageList" to-many relationship of CollectRecord. */
    public List<CollectPage> _queryCollectRecord_PageList(long bookId) {
        synchronized (this) {
            if (collectRecord_PageListQuery == null) {
                QueryBuilder<CollectPage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BookId.eq(null));
                collectRecord_PageListQuery = queryBuilder.build();
            }
        }
        Query<CollectPage> query = collectRecord_PageListQuery.forCurrentThread();
        query.setParameter(0, bookId);
        return query.list();
    }

}
