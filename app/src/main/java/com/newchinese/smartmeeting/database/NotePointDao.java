package com.newchinese.smartmeeting.database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.newchinese.smartmeeting.entity.bean.NotePoint;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE_POINT".
*/
public class NotePointDao extends AbstractDao<NotePoint, Long> {

    public static final String TABLENAME = "NOTE_POINT";

    /**
     * Properties of entity NotePoint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StrokeId = new Property(1, long.class, "strokeId", false, "STROKE_ID");
        public final static Property PX = new Property(2, float.class, "pX", false, "P_X");
        public final static Property PY = new Property(3, float.class, "pY", false, "P_Y");
        public final static Property Press = new Property(4, float.class, "press", false, "PRESS");
        public final static Property FirstPress = new Property(5, float.class, "firstPress", false, "FIRST_PRESS");
        public final static Property TestTime = new Property(6, float.class, "testTime", false, "TEST_TIME");
        public final static Property PageIndex = new Property(7, int.class, "pageIndex", false, "PAGE_INDEX");
        public final static Property PointType = new Property(8, int.class, "pointType", false, "POINT_TYPE");
    }

    private Query<NotePoint> noteStroke_PointListQuery;

    public NotePointDao(DaoConfig config) {
        super(config);
    }
    
    public NotePointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE_POINT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STROKE_ID\" INTEGER NOT NULL ," + // 1: strokeId
                "\"P_X\" REAL NOT NULL ," + // 2: pX
                "\"P_Y\" REAL NOT NULL ," + // 3: pY
                "\"PRESS\" REAL NOT NULL ," + // 4: press
                "\"FIRST_PRESS\" REAL NOT NULL ," + // 5: firstPress
                "\"TEST_TIME\" REAL NOT NULL ," + // 6: testTime
                "\"PAGE_INDEX\" INTEGER NOT NULL ," + // 7: pageIndex
                "\"POINT_TYPE\" INTEGER NOT NULL );"); // 8: pointType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE_POINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NotePoint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStrokeId());
        stmt.bindDouble(3, entity.getPX());
        stmt.bindDouble(4, entity.getPY());
        stmt.bindDouble(5, entity.getPress());
        stmt.bindDouble(6, entity.getFirstPress());
        stmt.bindDouble(7, entity.getTestTime());
        stmt.bindLong(8, entity.getPageIndex());
        stmt.bindLong(9, entity.getPointType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NotePoint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStrokeId());
        stmt.bindDouble(3, entity.getPX());
        stmt.bindDouble(4, entity.getPY());
        stmt.bindDouble(5, entity.getPress());
        stmt.bindDouble(6, entity.getFirstPress());
        stmt.bindDouble(7, entity.getTestTime());
        stmt.bindLong(8, entity.getPageIndex());
        stmt.bindLong(9, entity.getPointType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NotePoint readEntity(Cursor cursor, int offset) {
        NotePoint entity = new NotePoint( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // strokeId
            cursor.getFloat(offset + 2), // pX
            cursor.getFloat(offset + 3), // pY
            cursor.getFloat(offset + 4), // press
            cursor.getFloat(offset + 5), // firstPress
            cursor.getFloat(offset + 6), // testTime
            cursor.getInt(offset + 7), // pageIndex
            cursor.getInt(offset + 8) // pointType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NotePoint entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStrokeId(cursor.getLong(offset + 1));
        entity.setPX(cursor.getFloat(offset + 2));
        entity.setPY(cursor.getFloat(offset + 3));
        entity.setPress(cursor.getFloat(offset + 4));
        entity.setFirstPress(cursor.getFloat(offset + 5));
        entity.setTestTime(cursor.getFloat(offset + 6));
        entity.setPageIndex(cursor.getInt(offset + 7));
        entity.setPointType(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NotePoint entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NotePoint entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NotePoint entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "pointList" to-many relationship of NoteStroke. */
    public List<NotePoint> _queryNoteStroke_PointList(long strokeId) {
        synchronized (this) {
            if (noteStroke_PointListQuery == null) {
                QueryBuilder<NotePoint> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.StrokeId.eq(null));
                noteStroke_PointListQuery = queryBuilder.build();
            }
        }
        Query<NotePoint> query = noteStroke_PointListQuery.forCurrentThread();
        query.setParameter(0, strokeId);
        return query.list();
    }

}
